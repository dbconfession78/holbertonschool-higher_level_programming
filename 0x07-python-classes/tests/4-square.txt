The 4-square module
======================

Import module:
       >>> Square = __import__("4-square").Square

Check for documentation:
      >>> doc_mod = __import__("4-square").__doc__
      >>> print(len(doc_mod) > 0)
      True

      >>> doc_class = __import__("4-square").Square.__doc__
      >>> print(len(doc_class) > 0)
      True

Use cases

    # size as 0:
    >>> square = Square()
    >>> print("{:d}".format(square.size))
    0
    >>> print('{}'.format(square.area()))
    0

    # initialize class's size with positive int
    >>> square = Square(25)
    >>> print("{:d}".format(square.size))
    25
    >>> print('{}'.format(square.area()))
    625

    # size as int
    >>> square.size = 5
    >>> print("{:d}".format(square.size))
    5
    >>> print('{:d}'.format(square.area()))
    25

Error handling:
    # size as string
    >>> square.size = "some_words"
    ...
    Traceback (most recent call last):
    TypeError: size must be an integer

    # size negative
    >>> square.size = -5
    ...
    Traceback (most recent call last):
    ValueError: size must be >= 0

    # call priavte
    >>> print(square.__size)
    ...
    Traceback (most recent call last):
    AttributeError: 'Square' object has no attribute '__size'


    # check class instance type
    >>> print(type(square))
    <class '4-square.Square'>

    # check number of functions
    >>> print(square.__dict__)
    {'_Square__size': 5}

    # class init 'size' as string
    >>> new_square = Square("300")
    ...
    Traceback (most recent call last):
    TypeError: size must be an integer

    # class init 'size' as negative int
    >>> new_square = Square(-1)
    ...
    Traceback (most recent call last):
    ValueError: size must be >= 0
